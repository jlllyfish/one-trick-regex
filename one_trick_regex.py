import streamlit as st
import re
import pandas as pd

# Fonction pour g√©n√©rer automatiquement la documentation d'une expression r√©guli√®re
def generer_documentation(pattern):
    """Analyse une expression r√©guli√®re et g√©n√®re une documentation explicative d√©taill√©e."""
    try:
        doc = []
        exemples_valides = []
        exemples_invalides = []
        
        # Analyse basique du pattern
        if pattern.startswith('^') and pattern.endswith('$'):
            doc.append("Cette expression r√©guli√®re valide une cha√Æne compl√®te (doit correspondre du d√©but √† la fin).")
        elif pattern.startswith('^'):
            doc.append("Cette expression r√©guli√®re valide le d√©but d'une cha√Æne.")
        elif pattern.endswith('$'):
            doc.append("Cette expression r√©guli√®re valide la fin d'une cha√Æne.")
        else:
            doc.append("Cette expression r√©guli√®re recherche un motif n'importe o√π dans la cha√Æne.")
        
        # Reconnaissance de motifs sp√©cifiques avec interpr√©tation d√©taill√©e
        if pattern == r'^[A-Z][A-Z\s\-\']*$':
            doc = ["Cette expression r√©guli√®re valide un nom √©crit enti√®rement en MAJUSCULES."]
            doc.append("La cha√Æne doit commencer par une lettre majuscule ([A-Z]).")
            doc.append("Elle peut ensuite contenir plusieurs (ou aucun) caract√®res parmi: lettres majuscules, espaces, tirets ou apostrophes ([A-Z\\s\\-\']*).")
            doc.append("Aucun autre caract√®re n'est autoris√© (chiffres, minuscules, symboles, etc.).")
            exemples_valides = ["DUPONT", "MARTIN-DURAND", "O'CONNOR", "DE LA FONTAINE"]
            exemples_invalides = ["Dupont", "MARTIN2", "dupont", "123NOM"]
        
        elif r'^[0-9]{9}[A-Z]{2}$' in pattern:
            doc = ["Cette expression r√©guli√®re valide un code INE (Identifiant National √âtudiant)."]
            doc.append("La cha√Æne doit contenir exactement 9 chiffres ([0-9]{9}) suivis de 2 lettres majuscules ([A-Z]{2}).")
            doc.append("Aucun espace ou autre caract√®re n'est autoris√©.")
            exemples_valides = ["123456789AB", "987654321XY"]
            exemples_invalides = ["12345678AB", "123456789abc", "ABC123456", "123456789A"]
        
        elif r'^\d{2}-\d{2}-\d{4}$' in pattern:
            doc = ["Cette expression r√©guli√®re valide une date au format JJ-MM-AAAA."]
            doc.append("La cha√Æne doit contenir exactement 2 chiffres (jour), suivis d'un tiret, de 2 chiffres (mois), d'un tiret, puis de 4 chiffres (ann√©e).")
            doc.append("Tous les chiffres doivent √™tre sur 2 positions pour les jours et mois, et sur 4 positions pour l'ann√©e.")
            doc.append("Le s√©parateur doit √™tre un tiret (-) et non un autre caract√®re.")
            exemples_valides = ["01-01-2023", "31-12-2022"]
            exemples_invalides = ["1-1-2023", "01/01/2023"]
        
        elif r'^(0[1-9]|1[0-2])\/20[0-9]{2}$' in pattern:
            doc = ["Cette expression r√©guli√®re valide une date au format MM/AAAA pour le 21√®me si√®cle (2000-2099)."]
            doc.append("Le mois doit √™tre compris entre 01 et 12 (0[1-9] ou 1[0-2]).")
            doc.append("Le s√©parateur doit √™tre un slash (/).")
            doc.append("L'ann√©e doit commencer par '20' suivi de deux chiffres (entre 2000 et 2099).")
            exemples_valides = ["01/2023", "12/2099", "05/2010"]
            exemples_invalides = ["1/2023", "13/2023", "05/123", "05-2023", "05/1999"]
        
        elif r'@' in pattern and r'\.' in pattern:
            doc.append("Elle semble valider un format d'adresse email.")
            doc.append("Elle recherche un caract√®re '@' suivi d'un domaine contenant un point.")
            exemples_valides = ["exemple@domaine.com", "prenom.nom@entreprise.fr"]
            exemples_invalides = ["exemple@", "exemple@domaine", "@domaine.com"]
        
        # Si on n'a pas reconnu pr√©cis√©ment le motif, faire une analyse plus g√©n√©rique
        if len(doc) <= 2:
            # Analyse d√©taill√©e des classes de caract√®res
            if '[A-Z]' in pattern:
                doc.append("Elle contient des lettres majuscules (A √† Z).")
            if '[a-z]' in pattern:
                doc.append("Elle contient des lettres minuscules (a √† z).")
            if '[0-9]' in pattern:
                doc.append("Elle contient des chiffres (0 √† 9).")
            
            # Analyse d√©taill√©e des motifs courants
            if r'\d' in pattern:
                doc.append("Elle contient des chiffres (\\d √©quivaut √† [0-9]).")
            if r'\w' in pattern:
                doc.append("Elle contient des caract√®res alphanum√©riques (lettres, chiffres, underscore).")
            if r'\s' in pattern:
                doc.append("Elle contient des espaces blancs (espaces, tabulations, retours √† la ligne, etc.).")
            
            # Analyse des quantificateurs sp√©cifiques
            if '*' in pattern:
                doc.append("Elle contient un √©l√©ment qui peut se r√©p√©ter z√©ro ou plusieurs fois (*).")
            if '+' in pattern:
                doc.append("Elle contient un √©l√©ment qui doit se r√©p√©ter une ou plusieurs fois (+).")
            if '?' in pattern:
                doc.append("Elle contient un √©l√©ment optionnel (?).")
            
            # Analyse des s√©quences sp√©cifiques (s√©quences d'√©chappement)
            if r'\-' in pattern or r"\\'" in pattern:
                doc.append("Elle contient des caract√®res sp√©ciaux √©chapp√©s (comme tiret ou apostrophe).")
                
            # Analyse plus d√©taill√©e des classes de caract√®res
            if '[' in pattern and ']' in pattern:
                import re
                # Analyser les classes de caract√®res complexes
                classes = re.findall(r'\[(.*?)\]', pattern)
                for classe in classes:
                    if '-' in classe:
                        # Tenter de d√©crire les plages
                        plages = []
                        if 'A-Z' in classe:
                            plages.append("lettres majuscules (A-Z)")
                        if 'a-z' in classe:
                            plages.append("lettres minuscules (a-z)")
                        if '0-9' in classe:
                            plages.append("chiffres (0-9)")
                        if plages:
                            doc.append(f"Elle contient une classe de caract√®res incluant: {', '.join(plages)}.")
                    
                    # Caract√®res sp√©cifiques
                    special_chars = {'\\s': 'espaces', '\\d': 'chiffres', '\\w': 'caract√®res de mot'}
                    for char, desc in special_chars.items():
                        if char in classe:
                            doc.append(f"Elle accepte des {desc} dans une classe de caract√®res.")
            
            # Analyse des groupes et alternatives
            if '(' in pattern and ')' in pattern:
                import re
                # Trouver les groupes pour analyse
                groupes = re.findall(r'\((.*?)\)', pattern)
                if groupes:
                    doc.append(f"Elle contient {len(groupes)} groupe(s) de capture pour extraire des parties sp√©cifiques du texte.")
                    # Si un groupe contient un | (alternative)
                    for groupe in groupes:
                        if '|' in groupe:
                            alternatives = groupe.split('|')
                            doc.append(f"Elle contient une alternative entre plusieurs options: {', '.join([f'`{alt}`' for alt in alternatives])}.")
            
            # Analyse des quantificateurs pr√©cis
            quantif_pattern = re.compile(r'\{(\d+)(?:,(\d+)?)?\}')
            quantifs = quantif_pattern.findall(pattern)
            for quantif in quantifs:
                if quantif[1]:  # {n,m}
                    doc.append(f"Elle impose entre {quantif[0]} et {quantif[1]} occurrences d'un √©l√©ment.")
                else:  # {n}
                    doc.append(f"Elle impose exactement {quantif[0]} occurrences d'un √©l√©ment.")
        
        # Construire la documentation finale
        documentation = "\n".join(doc)
        
        if exemples_valides:
            documentation += "\n\nExemples valides :\n"
            documentation += "\n".join([f"- {ex}" for ex in exemples_valides])
            
        if exemples_invalides:
            documentation += "\n\nExemples invalides :\n"
            documentation += "\n".join([f"- {ex}" for ex in exemples_invalides])
            
        if not exemples_valides and not exemples_invalides:
            documentation += "\n\nNote : Vous pouvez enrichir cette documentation en ajoutant vos propres exemples valides et invalides."
        
        return documentation
    
    except Exception as e:
        return f"Impossible de g√©n√©rer la documentation automatiquement : {str(e)}\n\nVeuillez d√©crire manuellement ce que fait cette expression r√©guli√®re."

# Configuration de la page
st.set_page_config(page_title="one trick RegEx", page_icon="ü¶Ñ", layout="wide")

# Titre principal de l'application
st.title("One trick RegEx")

# Interface divis√©e en deux colonnes
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("Cr√©er votre expression r√©guli√®re (RegEx)")
    
    # Zone de saisie du regex
    default_pattern = r"^\d{2}-\d{2}-\d{4}$"
    # Utiliser la valeur de session_state si elle existe, sinon utiliser la valeur par d√©faut
    regex_pattern = st.text_input("Entrez votre expression r√©guli√®re:", 
                              value=st.session_state.get('regex_pattern', default_pattern),
                              help=r"Exemple: ^\d{2}-\d{2}-\d{4}$ pour valider une date au format JJ-MM-AAAA")

    # Description du regex
    st.subheader("Explication")
    
    # Ajout d'un bouton pour g√©n√©rer la documentation automatiquement
    if st.button("G√©n√©rer une explication automatique"):
        doc_generee = generer_documentation(regex_pattern)
        st.session_state['documentation_generee'] = doc_generee
    
    # Utiliser la documentation g√©n√©r√©e si disponible, sinon utiliser la valeur par d√©faut
    documentation_defaut = "Cette expression r√©guli√®re valide une date au format JJ-MM-AAAA.\n\nExemples valides :\n- 01-01-2023\n- 31-12-2022\n\nExemples invalides :\n- 1-1-2023 (les chiffres doivent √™tre sur 2 positions)\n- 01/01/2023 (mauvais s√©parateur)"
    regex_description = st.text_area(
        "D√©crivez ce que fait votre expression r√©guli√®re:", 
        height=150,
        value=st.session_state.get('documentation_generee', documentation_defaut)
    )

with col2:
    st.subheader("Tester votre expression r√©guli√®re")
    
    # Zone de test avec plusieurs lignes
    test_strings = st.text_area(
        "Entrez des textes √† tester (un par ligne):",
        height=150,
        value="01-01-2023\n31-12-2022\n1-1-2023\n01/01/2023\nABC"
    )
    
    # Bouton pour tester
    test_button = st.button("Tester", type="primary")
    
    # Tester le regex quand on clique sur le bouton
    if test_button:
        try:
            # R√©cup√©rer les flags depuis les options en bas de page
            current_flags = 0
            if 'ignore_case' in st.session_state and st.session_state['ignore_case']:
                current_flags |= re.IGNORECASE
            if 'multiline' in st.session_state and st.session_state['multiline']:
                current_flags |= re.MULTILINE
            if 'dotall' in st.session_state and st.session_state['dotall']:
                current_flags |= re.DOTALL
            if 'verbose' in st.session_state and st.session_state['verbose']:
                current_flags |= re.VERBOSE
                
            # Compiler le regex avec les flags
            pattern = re.compile(regex_pattern, flags=current_flags)
            
            # Tester chaque ligne
            results = []
            for i, line in enumerate(test_strings.splitlines()):
                if not line.strip():  # Ignorer les lignes vides
                    continue
                    
                match = pattern.search(line)
                
                # R√©cup√©rer les groupes si disponibles
                groups = match.groups() if match else None
                group_dict = match.groupdict() if match else None
                
                results.append({
                    "Ligne": i+1,
                    "Texte": line,
                    "Correspond": "‚úì" if match else "‚úó",
                    "Valeur trouv√©e": match.group(0) if match else None,
                    "Groupes": str(groups) if groups else None,
                    "Groupes nomm√©s": str(group_dict) if group_dict and len(group_dict) > 0 else None
                })
            
            # Afficher les r√©sultats dans un tableau
            if results:
                # Configuration des styles pour le tableau
                # Colorer les symboles ‚úì en vert et ‚úó en rouge
                df = pd.DataFrame(results)
                
                # Formatter le tableau
                def highlight_match(val):
                    if val == "‚úì":
                        return 'color: green; font-weight: bold'
                    elif val == "‚úó":
                        return 'color: red; font-weight: bold'
                    else:
                        return ''
                
                # Appliquer le style
                styled_df = df.style.map(highlight_match, subset=['Correspond'])
                
                # Afficher le tableau avec style
                st.dataframe(styled_df, use_container_width=True)
                
                # R√©sum√© avec coloration
                matches_count = sum(1 for r in results if r["Correspond"] == "‚úì")
                if matches_count > 0:
                    st.success(f"{matches_count} correspondance(s) trouv√©e(s) sur {len(results)} ligne(s).")
                else:
                    st.error(f"0 correspondance trouv√©e sur {len(results)} ligne(s).")
            else:
                st.warning("Aucun texte √† tester.")
            
        except Exception as e:
            st.error(f"Erreur lors de l'ex√©cution du regex: {str(e)}")

# Section avec exemples courants
st.markdown("---")
with st.expander("**Exemples d'expressions r√©guli√®res courantes**"):
    examples = {
        "Nom en majuscules": {
            "regex": r"^[A-Z][A-Z\s\-']*$",
            "description": "Valide un nom √©crit enti√®rement en majuscules, avec espaces, tirets ou apostrophes.",
            "exemples_valides": ["DUPONT", "MARTIN-DURAND", "O'CONNOR", "DE LA FONTAINE"],
            "exemples_invalides": ["Dupont", "MARTIN2", "dupont", "123NOM"]
        },
        "Code INE": {
            "regex": r"^[0-9]{9}[A-Z]{2}$",
            "description": "Valide un code INE (Identifiant National √âtudiant) compos√© de 9 chiffres suivis de 2 lettres majuscules.",
            "exemples_valides": ["123456789AB", "987654321XY"],
            "exemples_invalides": ["12345678AB", "123456789abc", "ABC123456", "123456789A"]
        },
        "Format date mois/ann√©e": {
            "regex": r"^(0[1-9]|1[0-2])\/20[0-9]{2}$",
            "description": "Valide une date au format MM/AAAA pour le 21√®me si√®cle (2000-2099).",
            "exemples_valides": ["01/2023", "12/2099", "05/2010"],
            "exemples_invalides": ["1/2023", "13/2023", "05/123", "05-2023", "05/1999"]
        }
    }
    
    # Afficher chaque exemple
    for name, example in examples.items():
        st.subheader(name)
        st.code(example["regex"])
        st.write(example["description"])
        st.write("**Exemples valides:** " + ", ".join(f"`{ex}`" for ex in example["exemples_valides"]))
        st.write("**Exemples invalides:** " + ", ".join(f"`{ex}`" for ex in example["exemples_invalides"]))
        
        # Cr√©er un bouton pour utiliser cet exemple
        if st.button(f"Utiliser cet exemple ({name})"):
            st.session_state['regex_pattern'] = example["regex"]
            st.rerun()
        
        st.markdown("---")


# Section explicative sur les expressions r√©guli√®res
with st.expander("Guide des expressions r√©guli√®res"):
    st.markdown("""
    ## Aide-m√©moire sur les expressions r√©guli√®res
    
    ### M√©tacaract√®res de base
    - `.` : N'importe quel caract√®re sauf nouvelle ligne
      * Exemple: `a.c` correspond √† "abc", "adc", "a1c", etc.
    - `^` : D√©but de cha√Æne
      * Exemple: `^bonjour` correspond √† "bonjour monde" mais pas √† "mon bonjour"
    - `$` : Fin de cha√Æne
      * Exemple: `monde$` correspond √† "bonjour monde" mais pas √† "monde entier"
    - `*` : 0 ou plusieurs occurrences
      * Exemple: `ab*c` correspond √† "ac", "abc", "abbc", "abbbc", etc.
    - `+` : 1 ou plusieurs occurrences
      * Exemple: `ab+c` correspond √† "abc", "abbc", "abbbc", mais pas √† "ac"
    - `?` : 0 ou 1 occurrence
      * Exemple: `colou?r` correspond √† "color" et "colour"
    - `{n}` : Exactement n occurrences
      * Exemple: `a{3}` correspond √† "aaa" mais pas √† "aa" ou "aaaa"
    - `{n,}` : Au moins n occurrences
      * Exemple: `a{2,}` correspond √† "aa", "aaa", "aaaa", etc. mais pas √† "a"
    - `{n,m}` : Entre n et m occurrences
      * Exemple: `a{2,4}` correspond √† "aa", "aaa", "aaaa" mais pas √† "a" ou "aaaaa"
    """)
    
    st.markdown("""
    ### Classes de caract√®res
    - `[abc]` : Un des caract√®res a, b ou c
      * Exemple: `[aeiou]` correspond √† n'importe quelle voyelle
    - `[^abc]` : Tout caract√®re sauf a, b et c
      * Exemple: `[^0-9]` correspond √† tout caract√®re qui n'est pas un chiffre
    - `[a-z]` : Tout caract√®re entre a et z
      * Exemple: `[a-z]` correspond √† toute lettre minuscule de l'alphabet latin
    - `\\d` : Chiffre (`[0-9]`)
      * Exemple: `\\d{3}` correspond √† trois chiffres comme "123", "456"
    - `\\D` : Non-chiffre (`[^0-9]`)
      * Exemple: `\\D+` correspond √† une suite de caract√®res sans chiffres
    - `\\w` : Caract√®re de mot (`[a-zA-Z0-9_]`)
      * Exemple: `\\w+` correspond √† un mot comme "exemple_123"
    - `\\W` : Non-caract√®re de mot
      * Exemple: `\\W` correspond √† des caract√®res comme "!", "@", "#"
    - `\\s` : Espace blanc
      * Exemple: `mot\\ssuivant` correspond √† "mot suivant"
    - `\\S` : Non-espace blanc
      * Exemple: `\\S+` correspond √† une suite de caract√®res sans espaces
    """)
    
    st.markdown("""
    ### Groupes
    - `(...)` : Capture un groupe
      * Exemple: `(\\d{2})-(\\d{2})-(\\d{4})` capture jour, mois et ann√©e
    - `(?:...)` : Groupe non capturant
      * Exemple: `(?:https?://)?example\\.com` groupe optionnel sans capture
    - `(?P<name>...)` : Groupe nomm√©
      * Exemple: `(?P<jour>\\d{2})-(?P<mois>\\d{2})-(?P<annee>\\d{4})`
    
    ### Alternatives
    - `a|b` : a ou b
      * Exemple: `chat|chien` correspond √† "chat" ou "chien"
    """)

# Accord√©on avec options du regex - plac√© tout en bas de la page
st.markdown("---")
with st.expander("Options avanc√©es"):
    st.write("Ces options modifient le comportement de l'expression r√©guli√®re:")
    col_options1, col_options2 = st.columns(2)
    with col_options1:
        st.session_state['ignore_case'] = st.checkbox("Ignorer la casse (re.IGNORECASE)", 
                                                   value=st.session_state.get('ignore_case', False))
        st.session_state['multiline'] = st.checkbox("Mode multiligne (re.MULTILINE)", 
                                                 value=st.session_state.get('multiline', False))
    with col_options2:
        st.session_state['dotall'] = st.checkbox("Point correspond √† tout (re.DOTALL)", 
                                              value=st.session_state.get('dotall', False))
        st.session_state['verbose'] = st.checkbox("Mode verbose (re.VERBOSE)", 
                                               value=st.session_state.get('verbose', False))
    
    # Explication d√©taill√©e des options
    st.markdown("""
    #### D√©tails des options
    
    - **Ignorer la casse** : Rend le regex insensible √† la casse. Ex: `/abc/i` correspond √† "ABC", "abc", "Abc", etc.
    - **Mode multiligne** : Fait que `^` et `$` correspondent au d√©but/fin de chaque ligne, pas seulement au d√©but/fin du texte.
    - **Point correspond √† tout** : Fait que le caract√®re `.` correspond √©galement aux sauts de ligne `\\n`.
    - **Mode verbose** : Permet d'√©crire des regex plus lisibles avec des espaces et commentaires ignor√©s.
    """)

# Mise √† jour de la variable de session
if 'regex_pattern' in st.session_state:
    if st.session_state['regex_pattern'] != regex_pattern:
        st.session_state['regex_pattern'] = regex_pattern
